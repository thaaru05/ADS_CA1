class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
        node.is_end_of_word = True

    def search(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                return False
            node = node.children[char]
        return node.is_end_of_word

    def delete(self, word):
        self._delete_recursive(self.root, word, 0)

    def _delete_recursive(self, node, word, index):
        if index == len(word):
            if not node.is_end_of_word:
                raise KeyError(f"Word '{word}' not found for deletion")
            node.is_end_of_word = False
            if not node.children:
                return True  # Node can be safely deleted
            return False  # Node has children, cannot be deleted

        char = word[index]
        if char not in node.children:
            raise KeyError(f"Word '{word}' not found for deletion")

        child_node = node.children[char]
        child_has_children = self._delete_recursive(child_node, word, index + 1)

        if not child_has_children:
            del node.children[char]

        return not node.is_end_of_word and not node.children

# Example usage:
trie = Trie()

# Insert words into the trie
words_to_insert = ["apple", "app", "banana", "bat"]
for word in words_to_insert:
    trie.insert(word)

# Search for words in the trie
print(trie.search("apple"))  # Output: True
print(trie.search("app"))    # Output: True
print(trie.search("appl"))   # Output: False

# Delete words from the trie
trie.delete("apple")
print(trie.search("apple"))  # Output: False
print(trie.search("app"))    # Output: True
