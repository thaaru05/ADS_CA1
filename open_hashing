class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None

class HashTable:
    def __init__(self, size):
        self.size = size
        self.table = [None] * size

    def hash_function(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        index = self.hash_function(key)

        if self.table[index] is None:
            # If the bucket is empty, create a new node
            self.table[index] = Node(key, value)
        else:
            # If the bucket is not empty, handle collision using linked list
            current = self.table[index]
            while current.next is not None:
                current = current.next
            current.next = Node(key, value)

    def search(self, key):
        index = self.hash_function(key)

        current = self.table[index]
        while current is not None:
            if current.key == key:
                return current.value
            current = current.next

        raise KeyError(f"Key '{key}' not found")

    def delete(self, key):
        index = self.hash_function(key)

        current = self.table[index]
        previous = None

        while current is not None:
            if current.key == key:
                if previous is None:
                    # If the node to be deleted is the first in the bucket
                    self.table[index] = current.next
                else:
                    previous.next = current.next
                return
            previous = current
            current = current.next

        raise KeyError(f"Key '{key}' not found")


# Example usage:
hash_table = HashTable(size=10)

hash_table.insert("one", 1)
hash_table.insert("two", 2)
hash_table.insert("three", 3)

print(hash_table.search("one"))  # Output: 1
print(hash_table.search("four"))  # Raises KeyError

hash_table.delete("two")
try:
    print(hash_table.search("two"))
except KeyError as e:
    print(e)  # Output: Key 'two' not found
